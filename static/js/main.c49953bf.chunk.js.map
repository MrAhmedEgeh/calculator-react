{"version":3,"sources":["ButtonGrid/Buttons.js","Results/Results.js","App.js","reportWebVitals.js","index.js"],"names":["Buttons","setResult","outputs","setOutputs","inputs","setInputs","calculator","clickHandler","e","isNaN","target","textContent","length","operatorClicked","equalClicked","numberClicked","el","push","console","log","className","onClick","Results","result","App","useState","divisons","param","includes","i","indexOf","num","parseFloat","num2","splice","multiplication","summation","subtract","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c49953bf.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Button.css';\r\n\r\nlet Buttons = ({setResult, outputs, setOutputs, inputs, setInputs, calculator}) => {\r\n    const clickHandler = (e) => {\r\n\r\n        if(!isNaN(e.target.textContent) || e.target.textContent === '.'){\r\n            numberClicked(e.target.textContent);\r\n        }else if(isNaN(e.target.textContent) && e.target.textContent !== '=' && e.target.textContent !== '.' &&\r\n        outputs[outputs.length - 1] !== '/'&&outputs[outputs.length - 1] !== '*'&&outputs[outputs.length - 1] !== '+' && outputs[outputs.length - 1] !== '-'){\r\n            operatorClicked(e.target.textContent);\r\n        }else if(e.target.textContent === '='){\r\n            equalClicked();\r\n            calculator();\r\n        }\r\n    }\r\n    const numberClicked = (el) => {\r\n        setInputs(inputs+el);\r\n    }\r\n\r\n    const operatorClicked = (el) =>{\r\n        //setOutputs([inputs, el]);  // submit number, operator\r\n        outputs.push(inputs, el);\r\n        console.log(outputs);\r\n        setInputs(\"\");\r\n    }\r\n    const equalClicked = () =>{\r\n        outputs.push(inputs)  // submit number, operator\r\n        setInputs(\"\");\r\n    }\r\n    const acButton = () =>{\r\n        setInputs(\"\");\r\n        setOutputs([]);\r\n        setResult(null);\r\n    }\r\n    const cButton = () =>{\r\n        setInputs(\"\");\r\n    }\r\n\r\n    return(\r\n        <div className=\"buttons\">\r\n            <button onClick={acButton} className=\"ac\">AC</button>\r\n            <button onClick={cButton} className=\"c\">C</button>\r\n            <button onClick={clickHandler}>1</button>\r\n            <button onClick={clickHandler}>2</button>\r\n            <button onClick={clickHandler}>3</button>\r\n            <button onClick={clickHandler} className=\"sp\">/</button>\r\n            <button onClick={clickHandler}>4</button>\r\n            <button onClick={clickHandler}>5</button>\r\n            <button onClick={clickHandler}>6</button>\r\n            <button onClick={clickHandler}className=\"sp\">*</button>\r\n            <button onClick={clickHandler}>7</button>\r\n            <button onClick={clickHandler}>8</button>\r\n            <button onClick={clickHandler}>9</button>\r\n            <button onClick={clickHandler} className=\"sp\">+</button>\r\n            <button onClick={clickHandler}>0</button>\r\n            <button onClick={clickHandler}>.</button>\r\n            <button onClick={clickHandler}>=</button>\r\n            <button onClick={clickHandler} className=\"sp\">-</button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Buttons;","import React from 'react';\r\nimport './Results.css';\r\n\r\nconst Results = ({inputs, result}) =>{\r\n\r\n    return(\r\n        <div className=\"results\">\r\n            <div className=\"input\">{inputs}</div>\r\n            <div className=\"final-result\">{result}</div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Results;","import React, {useState} from 'react';\n/*--importing css-----*/\nimport './App.css';\n/*--importing components-----*/\nimport Buttons from './ButtonGrid/Buttons';\nimport Results from './Results/Results.js';\n\nfunction App() {\n  const [inputs, setInputs] = useState(\"\");\n  const [outputs, setOutputs] = useState([]);\n  const [result, setResult] = useState(null);\n\n const calculator = () => {\n   console.log(outputs);\n   // if the last element is (/ * + -) meaning that there's no last operand then add zero as last operand\n  if(outputs[outputs.length - 1] === '/'||outputs[outputs.length - 1] === '*'|outputs[outputs.length - 1] === '+'||outputs[outputs.length - 1] === '-'){outputs.push(\"0\"); console.log(outputs)}\n  if(outputs.includes('/')){\n    setOutputs(...outputs, divisons(outputs));\n  }\n  if(outputs.includes(\"*\")){\n    setOutputs(...outputs, multiplication(outputs));\n  }\n\n  if(outputs.includes('-')){\n    setOutputs(...outputs, subtract(outputs));\n  }\n\n  if(outputs.includes('+')){\n    setOutputs(...outputs, summation(outputs));\n  }\n\n  if(outputs.length === 1){\n    setResult(outputs[0]);\n    setInputs(outputs[0]);\n    setOutputs([]);\n  }\n }\nconst divisons = (param) =>{\n  while(param.includes(\"/\")){\n    let i = param.indexOf(\"/\");\n  let num = parseFloat(param[i-1]);\n  let num2 = parseFloat(param[i+1]);\n  param.splice(i-1, 3, (num/num2));\n  }\n  return param;\n}\nconst multiplication = (param) =>{\n  while(param.includes(\"*\")){\n    let i = param.indexOf(\"*\");\n  let num = parseFloat(param[i-1]);\n  let num2 = parseFloat(param[i+1]);\n  param.splice(i-1, 3, (num*num2));\n  }\n  return param;\n}\n\n\nconst summation = (param) =>{\n  while(param.includes(\"+\")){\n    let i = param.indexOf(\"+\");\n  let num = parseFloat(param[i-1]);\n  let num2 = parseFloat(param[i+1]);\n  param.splice(i-1, 3, (num+num2));\n  }\n  return param;\n\n}\nconst subtract = (param) =>{\n  while(param.includes(\"-\")){\n    let i = param.indexOf(\"-\");\n  let num = parseFloat(param[i-1]);\n  let num2 = parseFloat(param[i+1]);\n  param.splice(i-1, 3, (num-num2));\n  }\n  return param;\n}\n//console.log(outputs);\n\n  return (\n\n    <div className=\"App\">\n      <Results inputs={inputs} result={result}/>\n       <Buttons setResult={setResult} calculator={calculator} outputs={outputs} setOutputs={setOutputs} setInputs={setInputs} inputs={inputs} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}